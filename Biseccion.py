# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pAcpYFMZOwE4GsDFoXUsqEaiuIeJth9H
"""

from sympy import*
import pandas as pd
import numpy as np

x = symbols('x')
func=x**10-1 #funcion que evaluaremos

def Bisec(func,xl,xu):
    cifras=3
   
    itera=0 
    m_itera=np.array([]) #matriz q almacena valores de itera
    m_xl=np.array([])   #matriz q alamacena valores de xl
    m_xu=np.array([])   #matriz q alamcena valores de xu
    xr=0
    m_xr=np.array([])   #matriz q almacena valores de xr
    es=(0.5*(10**(2-cifras)))
    ea=100
    m_ea=np.array([])   #matriz q alamcena valores de ea

    fl=func.evalf(subs={x: xl}) 
    
    while ea>es :
        
        xanterior=xr
        xr=(xl+xu)/2
        fr=func.evalf(subs={x:xr})
        itera=itera+1
        if xr != 0:
            ea=abs((xr-xanterior)/xr)*100
        test=fl*fr
        #agregamos valores a las matrices vacias
        m_itera=np.append(m_itera,itera)
        m_xl=np.append(m_xl,xl)
        m_xu=np.append(m_xu,xu)
        m_xr=np.append(m_xr,xr)
        m_ea=np.append(m_ea,ea)                     
        
        if test < 0 :
            xu=xr
        elif test >0:
            xl=xr
            fl=fr
        else:
            ea=0
    #representamos datos en pandas
    iteracion=pd.Series(m_itera,name="Iteracion")
    xl=pd.Series(m_xl,name="xl")
    xu=pd.Series(m_xu,name="xu")
    xr=pd.Series(m_xr,name="xr")
    ea=pd.Series(m_ea,name="ea%")
    tabla=pd.concat([iteracion,xl,xu,xr,ea],axis=1) #unimos en columnas
    return tabla

lista=Bisec(func,0,0.1)
lista
